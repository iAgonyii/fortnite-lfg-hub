using DataLayer;
using DataLayerDTO;
using DataLayerInterface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BusinessLayer.Logic
{
    public class ProfileLogic
    {
        private readonly IProfileCommands profileCommands = new ProfileCommands();

        // Authentication
        public bool Login(string username, string password)
        {
            if (profileCommands.CheckCredentials(new ProfileDTO() { Username = username, Password = password }))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void Register(string username, string password)
        {
            profileCommands.RegisterNewProfile(new ProfileDTO() { Username = username, Password = password });
        }

        public int GetUserIdForName(string username)
        {
            int UserId = profileCommands.GetUserIdForName(username);
            return UserId;
        }

        public string GetUsernameForId(int id)
        {
            string username = profileCommands.GetUsernameForId(id);
            return username;
        }

        // General profile info
        public void UpdateProfileInfo(int id, string freeText, string socialURL, bool looking, string picture, Regions region)
        {
            if(freeText == null)
            {
                freeText = "";
            }
            if(picture == null)
            {
                picture = "";
            }
            profileCommands.UpdateProfileInfo(new ProfileDTO() { UserId = id, FreeText = freeText, SocialURL = socialURL, Looking = looking.ToString(), Picture = picture, Region = region.ToString() });
        }
        
        // Achievements
        public void UpdateProfileAchievements(List<Achievement> achievements, int id)
        {
             IAchievementCommands achievementCommands = new AchievementCommands();

            // The method removes the empty achievements from the list if there are any, that were generated by the viewmodel.
            // Se we dont have to execute the command if there are no achievements.
            List<AchievementDTO> dtos = achievementsToDtos(achievements);
            List<string> flairs = flairsForAchievements(achievements);
            if (dtos.Count > 0)
            {
                achievementCommands.UpdateAchievements(dtos, flairs, id);
            }
        }

        // Comments
        public void AddComment(int source, int target, string text)
        {
            ICommentCommands commentCommands = new CommentCommands();

            CommentDTO dto = new CommentDTO() { SourceUser = source, TargetUser = target, CommentText = text };
            commentCommands.AddComment(dto);
        }

        public void DeleteComment(int commentId)
        {
            ICommentCommands commentCommands = new CommentCommands();

            commentCommands.DeleteComment(commentId);
        }




        // Private formatting methods
        private List<AchievementDTO> achievementsToDtos(List<Achievement> achievements)
        {
            List<AchievementDTO> dtos = new List<AchievementDTO>();
            foreach (Achievement achievement in achievements)
            {
                if (achievement.Rank != null && achievement.EventId != "1")
                {
                    dtos.Add(new AchievementDTO() { Rank = Convert.ToInt32(achievement.Rank), Event = achievement.EventId });
                }
            }
            return dtos;
        }

        private List<string> flairsForAchievements(List<Achievement> achievements)
        {
            HashSet<string> flairs = new HashSet<string>();
            foreach (Achievement achv in achievements)
            {
                if (achv.Rank <= 1000 && achv.Rank >= 501)
                {
                    flairs.Add(Flairs.Top_1000.ToString());
                }
                else if (achv.Rank <= 500 && achv.Rank >= 251)
                {
                    flairs.Add(Flairs.Top_500.ToString());
                }
                else if (achv.Rank <= 250 && achv.Rank >= 151)
                {
                    flairs.Add(Flairs.Top_250.ToString());
                }
                else if (achv.Rank <= 150 && achv.Rank >= 101)
                {
                    flairs.Add(Flairs.Top_150.ToString());
                }
                else if (achv.Rank <= 100 && achv.Rank >= 51)
                {
                    flairs.Add(Flairs.Top_100.ToString());
                }
                else if (achv.Rank <= 50 && achv.Rank >= 26)
                {
                    flairs.Add(Flairs.Top_50.ToString());
                }
                else if (achv.Rank <= 25 && achv.Rank >= 1)
                {
                    flairs.Add(Flairs.Top_25.ToString());
                }
            }
            List<string> flairsList = flairs.ToList();
            return flairsList;
        }
    }
}
